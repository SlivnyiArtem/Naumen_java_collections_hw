package ru.naumen.collection.task2;

import java.util.HashMap;

/**
 * Дано:
 * <pre>
 * public class Ticket {
 *     private long id;
 *     private String client;
 *     …
 * }</pre>
 * <p>Разработать программу для бармена в холле огромного концертного зала.
 * Зрители в кассе покупают билет (класс Ticket), на котором указан идентификатор билета (id) и имя зрителя.
 * При этом, есть возможность докупить наборы разных товаров (комбо-обед): нет товаров, напитки, еда и напитки.
 * Доп. услуги оформляются через интернет и привязываются к билету, но хранятся отдельно от билета
 * (нельзя добавить товары в класс Ticket).</p>
 * <p>Бармен сканирует билет и получает объект Ticket. По этому объекту нужно уметь
 * находить необходимые товары по номеру билета. И делать это нужно очень быстро,
 * ведь нужно как можно быстрее всех накормить.</p>
 *
 * См. {@link Ticket}
 *
 * @author vpyzhyanov
 * @since 19.10.2023
 *
 * <p>Наиболее оптимальным выглядыет вариант разработать метод, принимающий на вход билет и</p>
 * <p>HashMap коллекцию: id_билета - тип заказа, где тип заказа представлен в формате перечисления(Enum)</p>
 * <p>В этом случае мы сможем жестко ограничить набор вариантов комбо-обеда</p>
 * <p>и за O(1) получить по значению поля Id класса Ticket строковое представление типа комбо-обеда для выбранного билета</p>
 * <p>Итого: O(1)</p>
 *  @author Artem Slivnyi
 *  @since 29.03.2023
 */
public class Task2 {
    private HashMap<Long, OrderType> ordersMap;

    public Task2(HashMap<Long, OrderType> ordersMap) {
        this.ordersMap = ordersMap;
    }

    public String getFoodOrder(Ticket ticket){
        return this.ordersMap.get(ticket.getId()).getDesc();
    }
}
